
ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001272  00001306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007c  0080007c  00001322  2**0
                  ALLOC
  3 .stab         00001d64  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010b3  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ef 07 	call	0xfde	; 0xfde <main>
      8a:	0c 94 37 09 	jmp	0x126e	; 0x126e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_enumSetPinDirection>:
#include "GPIO_config.h"
#include "GPIO_private.h"
#include "GPIO_interface.h"

GPIO_ErrorStatus GPIO_enumSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8PInDirection)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
      aa:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Copy_u8Pin <= GPIO_PIN7))
      b0:	8a 81       	ldd	r24, Y+2	; 0x02
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	08 f0       	brcs	.+2      	; 0xb8 <GPIO_enumSetPinDirection+0x26>
      b6:	f1 c0       	rjmp	.+482    	; 0x29a <GPIO_enumSetPinDirection+0x208>
      b8:	8b 81       	ldd	r24, Y+3	; 0x03
      ba:	88 30       	cpi	r24, 0x08	; 8
      bc:	08 f0       	brcs	.+2      	; 0xc0 <GPIO_enumSetPinDirection+0x2e>
      be:	ed c0       	rjmp	.+474    	; 0x29a <GPIO_enumSetPinDirection+0x208>
	{
		if (Copy_u8PInDirection == GPIO_PIN_OUTPUT)
      c0:	8c 81       	ldd	r24, Y+4	; 0x04
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	09 f0       	breq	.+2      	; 0xc8 <GPIO_enumSetPinDirection+0x36>
      c6:	6f c0       	rjmp	.+222    	; 0x1a6 <GPIO_enumSetPinDirection+0x114>
		{
			switch (Copy_u8Port)
      c8:	8a 81       	ldd	r24, Y+2	; 0x02
      ca:	28 2f       	mov	r18, r24
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	38 87       	std	Y+8, r19	; 0x08
      d0:	2f 83       	std	Y+7, r18	; 0x07
      d2:	8f 81       	ldd	r24, Y+7	; 0x07
      d4:	98 85       	ldd	r25, Y+8	; 0x08
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	91 05       	cpc	r25, r1
      da:	49 f1       	breq	.+82     	; 0x12e <GPIO_enumSetPinDirection+0x9c>
      dc:	2f 81       	ldd	r18, Y+7	; 0x07
      de:	38 85       	ldd	r19, Y+8	; 0x08
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	2c f4       	brge	.+10     	; 0xf0 <GPIO_enumSetPinDirection+0x5e>
      e6:	8f 81       	ldd	r24, Y+7	; 0x07
      e8:	98 85       	ldd	r25, Y+8	; 0x08
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	61 f0       	breq	.+24     	; 0x106 <GPIO_enumSetPinDirection+0x74>
      ee:	d6 c0       	rjmp	.+428    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
      f0:	2f 81       	ldd	r18, Y+7	; 0x07
      f2:	38 85       	ldd	r19, Y+8	; 0x08
      f4:	22 30       	cpi	r18, 0x02	; 2
      f6:	31 05       	cpc	r19, r1
      f8:	71 f1       	breq	.+92     	; 0x156 <GPIO_enumSetPinDirection+0xc4>
      fa:	8f 81       	ldd	r24, Y+7	; 0x07
      fc:	98 85       	ldd	r25, Y+8	; 0x08
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	91 05       	cpc	r25, r1
     102:	e9 f1       	breq	.+122    	; 0x17e <GPIO_enumSetPinDirection+0xec>
     104:	cb c0       	rjmp	.+406    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
			{
			case GPIO_PORTA:
				SET_BIT(DDRA, Copy_u8Pin);
     106:	aa e3       	ldi	r26, 0x3A	; 58
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	ea e3       	ldi	r30, 0x3A	; 58
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	48 2f       	mov	r20, r24
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	28 2f       	mov	r18, r24
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 2e       	mov	r0, r18
     11e:	02 c0       	rjmp	.+4      	; 0x124 <GPIO_enumSetPinDirection+0x92>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	0a 94       	dec	r0
     126:	e2 f7       	brpl	.-8      	; 0x120 <GPIO_enumSetPinDirection+0x8e>
     128:	84 2b       	or	r24, r20
     12a:	8c 93       	st	X, r24
     12c:	b7 c0       	rjmp	.+366    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			case GPIO_PORTB:
				SET_BIT(DDRB, Copy_u8Pin);
     12e:	a7 e3       	ldi	r26, 0x37	; 55
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e7 e3       	ldi	r30, 0x37	; 55
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 2e       	mov	r0, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <GPIO_enumSetPinDirection+0xba>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <GPIO_enumSetPinDirection+0xb6>
     150:	84 2b       	or	r24, r20
     152:	8c 93       	st	X, r24
     154:	a3 c0       	rjmp	.+326    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			case GPIO_PORTC:
				SET_BIT(DDRC, Copy_u8Pin);
     156:	a4 e3       	ldi	r26, 0x34	; 52
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	e4 e3       	ldi	r30, 0x34	; 52
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	48 2f       	mov	r20, r24
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 2e       	mov	r0, r18
     16e:	02 c0       	rjmp	.+4      	; 0x174 <GPIO_enumSetPinDirection+0xe2>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <GPIO_enumSetPinDirection+0xde>
     178:	84 2b       	or	r24, r20
     17a:	8c 93       	st	X, r24
     17c:	8f c0       	rjmp	.+286    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			case GPIO_PORTD:
				SET_BIT(DDRD, Copy_u8Pin);
     17e:	a1 e3       	ldi	r26, 0x31	; 49
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e1 e3       	ldi	r30, 0x31	; 49
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	48 2f       	mov	r20, r24
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	28 2f       	mov	r18, r24
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 2e       	mov	r0, r18
     196:	02 c0       	rjmp	.+4      	; 0x19c <GPIO_enumSetPinDirection+0x10a>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	0a 94       	dec	r0
     19e:	e2 f7       	brpl	.-8      	; 0x198 <GPIO_enumSetPinDirection+0x106>
     1a0:	84 2b       	or	r24, r20
     1a2:	8c 93       	st	X, r24
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			default:
				break;
			}
		}
		else if (Copy_u8PInDirection == GPIO_PIN_INPUT)
     1a6:	8c 81       	ldd	r24, Y+4	; 0x04
     1a8:	88 23       	and	r24, r24
     1aa:	09 f0       	breq	.+2      	; 0x1ae <GPIO_enumSetPinDirection+0x11c>
     1ac:	74 c0       	rjmp	.+232    	; 0x296 <GPIO_enumSetPinDirection+0x204>
		{
			switch (Copy_u8Port)
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	3e 83       	std	Y+6, r19	; 0x06
     1b6:	2d 83       	std	Y+5, r18	; 0x05
     1b8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ba:	9e 81       	ldd	r25, Y+6	; 0x06
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	91 05       	cpc	r25, r1
     1c0:	59 f1       	breq	.+86     	; 0x218 <GPIO_enumSetPinDirection+0x186>
     1c2:	2d 81       	ldd	r18, Y+5	; 0x05
     1c4:	3e 81       	ldd	r19, Y+6	; 0x06
     1c6:	22 30       	cpi	r18, 0x02	; 2
     1c8:	31 05       	cpc	r19, r1
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <GPIO_enumSetPinDirection+0x144>
     1cc:	8d 81       	ldd	r24, Y+5	; 0x05
     1ce:	9e 81       	ldd	r25, Y+6	; 0x06
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	69 f0       	breq	.+26     	; 0x1ee <GPIO_enumSetPinDirection+0x15c>
     1d4:	63 c0       	rjmp	.+198    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
     1d6:	2d 81       	ldd	r18, Y+5	; 0x05
     1d8:	3e 81       	ldd	r19, Y+6	; 0x06
     1da:	22 30       	cpi	r18, 0x02	; 2
     1dc:	31 05       	cpc	r19, r1
     1de:	89 f1       	breq	.+98     	; 0x242 <GPIO_enumSetPinDirection+0x1b0>
     1e0:	8d 81       	ldd	r24, Y+5	; 0x05
     1e2:	9e 81       	ldd	r25, Y+6	; 0x06
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	91 05       	cpc	r25, r1
     1e8:	09 f4       	brne	.+2      	; 0x1ec <GPIO_enumSetPinDirection+0x15a>
     1ea:	40 c0       	rjmp	.+128    	; 0x26c <GPIO_enumSetPinDirection+0x1da>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
			{
			case GPIO_PORTA:
				CLEAR_BIT(DDRA, Copy_u8Pin);
     1ee:	aa e3       	ldi	r26, 0x3A	; 58
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	ea e3       	ldi	r30, 0x3A	; 58
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	48 2f       	mov	r20, r24
     1fa:	8b 81       	ldd	r24, Y+3	; 0x03
     1fc:	28 2f       	mov	r18, r24
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 2e       	mov	r0, r18
     206:	02 c0       	rjmp	.+4      	; 0x20c <GPIO_enumSetPinDirection+0x17a>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	0a 94       	dec	r0
     20e:	e2 f7       	brpl	.-8      	; 0x208 <GPIO_enumSetPinDirection+0x176>
     210:	80 95       	com	r24
     212:	84 23       	and	r24, r20
     214:	8c 93       	st	X, r24
     216:	42 c0       	rjmp	.+132    	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			case GPIO_PORTB:
				CLEAR_BIT(DDRB, Copy_u8Pin);
     218:	a7 e3       	ldi	r26, 0x37	; 55
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e7 e3       	ldi	r30, 0x37	; 55
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	48 2f       	mov	r20, r24
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 2e       	mov	r0, r18
     230:	02 c0       	rjmp	.+4      	; 0x236 <GPIO_enumSetPinDirection+0x1a4>
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <GPIO_enumSetPinDirection+0x1a0>
     23a:	80 95       	com	r24
     23c:	84 23       	and	r24, r20
     23e:	8c 93       	st	X, r24
     240:	2d c0       	rjmp	.+90     	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			case GPIO_PORTC:
				CLEAR_BIT(DDRC, Copy_u8Pin);
     242:	a4 e3       	ldi	r26, 0x34	; 52
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e4 e3       	ldi	r30, 0x34	; 52
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <GPIO_enumSetPinDirection+0x1ce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <GPIO_enumSetPinDirection+0x1ca>
     264:	80 95       	com	r24
     266:	84 23       	and	r24, r20
     268:	8c 93       	st	X, r24
     26a:	18 c0       	rjmp	.+48     	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			case GPIO_PORTD:
				CLEAR_BIT(DDRD, Copy_u8Pin);
     26c:	a1 e3       	ldi	r26, 0x31	; 49
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e1 e3       	ldi	r30, 0x31	; 49
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	48 2f       	mov	r20, r24
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	02 2e       	mov	r0, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <GPIO_enumSetPinDirection+0x1f8>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <GPIO_enumSetPinDirection+0x1f4>
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	8c 93       	st	X, r24
     294:	03 c0       	rjmp	.+6      	; 0x29c <GPIO_enumSetPinDirection+0x20a>
				break;
			}
		}
		else
		{
			LOC_enumState = GPIO_NOK;
     296:	19 82       	std	Y+1, r1	; 0x01
     298:	01 c0       	rjmp	.+2      	; 0x29c <GPIO_enumSetPinDirection+0x20a>
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     29a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     29c:	89 81       	ldd	r24, Y+1	; 0x01
}
     29e:	28 96       	adiw	r28, 0x08	; 8
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <GPIO_enumSetPinValue>:

GPIO_ErrorStatus GPIO_enumSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8PinValue)
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	28 97       	sbiw	r28, 0x08	; 8
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Copy_u8Pin <= GPIO_PIN7))
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	84 30       	cpi	r24, 0x04	; 4
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <GPIO_enumSetPinValue+0x26>
     2d4:	f1 c0       	rjmp	.+482    	; 0x4b8 <GPIO_enumSetPinValue+0x208>
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	08 f0       	brcs	.+2      	; 0x2de <GPIO_enumSetPinValue+0x2e>
     2dc:	ed c0       	rjmp	.+474    	; 0x4b8 <GPIO_enumSetPinValue+0x208>
	{
		if (Copy_u8PinValue == GPIO_PIN_HIGH)
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <GPIO_enumSetPinValue+0x36>
     2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <GPIO_enumSetPinValue+0x114>
		{
			switch (Copy_u8Port)
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	38 87       	std	Y+8, r19	; 0x08
     2ee:	2f 83       	std	Y+7, r18	; 0x07
     2f0:	8f 81       	ldd	r24, Y+7	; 0x07
     2f2:	98 85       	ldd	r25, Y+8	; 0x08
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	91 05       	cpc	r25, r1
     2f8:	49 f1       	breq	.+82     	; 0x34c <GPIO_enumSetPinValue+0x9c>
     2fa:	2f 81       	ldd	r18, Y+7	; 0x07
     2fc:	38 85       	ldd	r19, Y+8	; 0x08
     2fe:	22 30       	cpi	r18, 0x02	; 2
     300:	31 05       	cpc	r19, r1
     302:	2c f4       	brge	.+10     	; 0x30e <GPIO_enumSetPinValue+0x5e>
     304:	8f 81       	ldd	r24, Y+7	; 0x07
     306:	98 85       	ldd	r25, Y+8	; 0x08
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	61 f0       	breq	.+24     	; 0x324 <GPIO_enumSetPinValue+0x74>
     30c:	d6 c0       	rjmp	.+428    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
     30e:	2f 81       	ldd	r18, Y+7	; 0x07
     310:	38 85       	ldd	r19, Y+8	; 0x08
     312:	22 30       	cpi	r18, 0x02	; 2
     314:	31 05       	cpc	r19, r1
     316:	71 f1       	breq	.+92     	; 0x374 <GPIO_enumSetPinValue+0xc4>
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	98 85       	ldd	r25, Y+8	; 0x08
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	91 05       	cpc	r25, r1
     320:	e9 f1       	breq	.+122    	; 0x39c <GPIO_enumSetPinValue+0xec>
     322:	cb c0       	rjmp	.+406    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
			{
			case GPIO_PORTA:
				SET_BIT(PORTA, Copy_u8Pin);
     324:	ab e3       	ldi	r26, 0x3B	; 59
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	eb e3       	ldi	r30, 0x3B	; 59
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	48 2f       	mov	r20, r24
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	28 2f       	mov	r18, r24
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 2e       	mov	r0, r18
     33c:	02 c0       	rjmp	.+4      	; 0x342 <GPIO_enumSetPinValue+0x92>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <GPIO_enumSetPinValue+0x8e>
     346:	84 2b       	or	r24, r20
     348:	8c 93       	st	X, r24
     34a:	b7 c0       	rjmp	.+366    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			case GPIO_PORTB:
				SET_BIT(PORTB, Copy_u8Pin);
     34c:	a8 e3       	ldi	r26, 0x38	; 56
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e8 e3       	ldi	r30, 0x38	; 56
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	48 2f       	mov	r20, r24
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	02 2e       	mov	r0, r18
     364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_enumSetPinValue+0xba>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_enumSetPinValue+0xb6>
     36e:	84 2b       	or	r24, r20
     370:	8c 93       	st	X, r24
     372:	a3 c0       	rjmp	.+326    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			case GPIO_PORTC:
				SET_BIT(PORTC, Copy_u8Pin);
     374:	a5 e3       	ldi	r26, 0x35	; 53
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e5 e3       	ldi	r30, 0x35	; 53
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	48 2f       	mov	r20, r24
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	02 2e       	mov	r0, r18
     38c:	02 c0       	rjmp	.+4      	; 0x392 <GPIO_enumSetPinValue+0xe2>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	0a 94       	dec	r0
     394:	e2 f7       	brpl	.-8      	; 0x38e <GPIO_enumSetPinValue+0xde>
     396:	84 2b       	or	r24, r20
     398:	8c 93       	st	X, r24
     39a:	8f c0       	rjmp	.+286    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			case GPIO_PORTD:
				SET_BIT(PORTD, Copy_u8Pin);
     39c:	a2 e3       	ldi	r26, 0x32	; 50
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e2 e3       	ldi	r30, 0x32	; 50
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	48 2f       	mov	r20, r24
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	28 2f       	mov	r18, r24
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 2e       	mov	r0, r18
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_enumSetPinValue+0x10a>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_enumSetPinValue+0x106>
     3be:	84 2b       	or	r24, r20
     3c0:	8c 93       	st	X, r24
     3c2:	7b c0       	rjmp	.+246    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			default:
				break;
			}
		}
		else if (Copy_u8PinValue == GPIO_PIN_LOW)
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	88 23       	and	r24, r24
     3c8:	09 f0       	breq	.+2      	; 0x3cc <GPIO_enumSetPinValue+0x11c>
     3ca:	74 c0       	rjmp	.+232    	; 0x4b4 <GPIO_enumSetPinValue+0x204>
		{
			switch (Copy_u8Port)
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	3e 83       	std	Y+6, r19	; 0x06
     3d4:	2d 83       	std	Y+5, r18	; 0x05
     3d6:	8d 81       	ldd	r24, Y+5	; 0x05
     3d8:	9e 81       	ldd	r25, Y+6	; 0x06
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	91 05       	cpc	r25, r1
     3de:	59 f1       	breq	.+86     	; 0x436 <GPIO_enumSetPinValue+0x186>
     3e0:	2d 81       	ldd	r18, Y+5	; 0x05
     3e2:	3e 81       	ldd	r19, Y+6	; 0x06
     3e4:	22 30       	cpi	r18, 0x02	; 2
     3e6:	31 05       	cpc	r19, r1
     3e8:	2c f4       	brge	.+10     	; 0x3f4 <GPIO_enumSetPinValue+0x144>
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	9e 81       	ldd	r25, Y+6	; 0x06
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	69 f0       	breq	.+26     	; 0x40c <GPIO_enumSetPinValue+0x15c>
     3f2:	63 c0       	rjmp	.+198    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
     3f4:	2d 81       	ldd	r18, Y+5	; 0x05
     3f6:	3e 81       	ldd	r19, Y+6	; 0x06
     3f8:	22 30       	cpi	r18, 0x02	; 2
     3fa:	31 05       	cpc	r19, r1
     3fc:	89 f1       	breq	.+98     	; 0x460 <GPIO_enumSetPinValue+0x1b0>
     3fe:	8d 81       	ldd	r24, Y+5	; 0x05
     400:	9e 81       	ldd	r25, Y+6	; 0x06
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	91 05       	cpc	r25, r1
     406:	09 f4       	brne	.+2      	; 0x40a <GPIO_enumSetPinValue+0x15a>
     408:	40 c0       	rjmp	.+128    	; 0x48a <GPIO_enumSetPinValue+0x1da>
     40a:	57 c0       	rjmp	.+174    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
			{
			case GPIO_PORTA:
				CLEAR_BIT(PORTA, Copy_u8Pin);
     40c:	ab e3       	ldi	r26, 0x3B	; 59
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	eb e3       	ldi	r30, 0x3B	; 59
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	48 2f       	mov	r20, r24
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 2e       	mov	r0, r18
     424:	02 c0       	rjmp	.+4      	; 0x42a <GPIO_enumSetPinValue+0x17a>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <GPIO_enumSetPinValue+0x176>
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8c 93       	st	X, r24
     434:	42 c0       	rjmp	.+132    	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			case GPIO_PORTB:
				CLEAR_BIT(PORTB, Copy_u8Pin);
     436:	a8 e3       	ldi	r26, 0x38	; 56
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e8 e3       	ldi	r30, 0x38	; 56
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	48 2f       	mov	r20, r24
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 2e       	mov	r0, r18
     44e:	02 c0       	rjmp	.+4      	; 0x454 <GPIO_enumSetPinValue+0x1a4>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <GPIO_enumSetPinValue+0x1a0>
     458:	80 95       	com	r24
     45a:	84 23       	and	r24, r20
     45c:	8c 93       	st	X, r24
     45e:	2d c0       	rjmp	.+90     	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			case GPIO_PORTC:
				CLEAR_BIT(PORTC, Copy_u8Pin);
     460:	a5 e3       	ldi	r26, 0x35	; 53
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	e5 e3       	ldi	r30, 0x35	; 53
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	48 2f       	mov	r20, r24
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	28 2f       	mov	r18, r24
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 2e       	mov	r0, r18
     478:	02 c0       	rjmp	.+4      	; 0x47e <GPIO_enumSetPinValue+0x1ce>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <GPIO_enumSetPinValue+0x1ca>
     482:	80 95       	com	r24
     484:	84 23       	and	r24, r20
     486:	8c 93       	st	X, r24
     488:	18 c0       	rjmp	.+48     	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			case GPIO_PORTD:
				CLEAR_BIT(PORTD, Copy_u8Pin);
     48a:	a2 e3       	ldi	r26, 0x32	; 50
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	e2 e3       	ldi	r30, 0x32	; 50
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	48 2f       	mov	r20, r24
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <GPIO_enumSetPinValue+0x1f8>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <GPIO_enumSetPinValue+0x1f4>
     4ac:	80 95       	com	r24
     4ae:	84 23       	and	r24, r20
     4b0:	8c 93       	st	X, r24
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <GPIO_enumSetPinValue+0x20a>
				break;
			}
		}
		else
		{
			LOC_enumState = GPIO_NOK;
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <GPIO_enumSetPinValue+0x20a>
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     4b8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     4bc:	28 96       	adiw	r28, 0x08	; 8
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <GPIO_enumGetPinValue>:

GPIO_ErrorStatus GPIO_enumGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Ptr_u8PinValue)
{
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	27 97       	sbiw	r28, 0x07	; 7
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	8a 83       	std	Y+2, r24	; 0x02
     4e4:	6b 83       	std	Y+3, r22	; 0x03
     4e6:	5d 83       	std	Y+5, r21	; 0x05
     4e8:	4c 83       	std	Y+4, r20	; 0x04
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Copy_u8Pin <= GPIO_PIN7) && (Ptr_u8PinValue != NULL))
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	84 30       	cpi	r24, 0x04	; 4
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <GPIO_enumGetPinValue+0x28>
     4f4:	7a c0       	rjmp	.+244    	; 0x5ea <GPIO_enumGetPinValue+0x11c>
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	88 30       	cpi	r24, 0x08	; 8
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <GPIO_enumGetPinValue+0x30>
     4fc:	76 c0       	rjmp	.+236    	; 0x5ea <GPIO_enumGetPinValue+0x11c>
     4fe:	8c 81       	ldd	r24, Y+4	; 0x04
     500:	9d 81       	ldd	r25, Y+5	; 0x05
     502:	00 97       	sbiw	r24, 0x00	; 0
     504:	09 f4       	brne	.+2      	; 0x508 <GPIO_enumGetPinValue+0x3a>
     506:	71 c0       	rjmp	.+226    	; 0x5ea <GPIO_enumGetPinValue+0x11c>
	{
		switch (Copy_u8Port)
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	28 2f       	mov	r18, r24
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	3f 83       	std	Y+7, r19	; 0x07
     510:	2e 83       	std	Y+6, r18	; 0x06
     512:	4e 81       	ldd	r20, Y+6	; 0x06
     514:	5f 81       	ldd	r21, Y+7	; 0x07
     516:	41 30       	cpi	r20, 0x01	; 1
     518:	51 05       	cpc	r21, r1
     51a:	59 f1       	breq	.+86     	; 0x572 <GPIO_enumGetPinValue+0xa4>
     51c:	8e 81       	ldd	r24, Y+6	; 0x06
     51e:	9f 81       	ldd	r25, Y+7	; 0x07
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	91 05       	cpc	r25, r1
     524:	34 f4       	brge	.+12     	; 0x532 <GPIO_enumGetPinValue+0x64>
     526:	2e 81       	ldd	r18, Y+6	; 0x06
     528:	3f 81       	ldd	r19, Y+7	; 0x07
     52a:	21 15       	cp	r18, r1
     52c:	31 05       	cpc	r19, r1
     52e:	69 f0       	breq	.+26     	; 0x54a <GPIO_enumGetPinValue+0x7c>
     530:	5d c0       	rjmp	.+186    	; 0x5ec <GPIO_enumGetPinValue+0x11e>
     532:	4e 81       	ldd	r20, Y+6	; 0x06
     534:	5f 81       	ldd	r21, Y+7	; 0x07
     536:	42 30       	cpi	r20, 0x02	; 2
     538:	51 05       	cpc	r21, r1
     53a:	79 f1       	breq	.+94     	; 0x59a <GPIO_enumGetPinValue+0xcc>
     53c:	8e 81       	ldd	r24, Y+6	; 0x06
     53e:	9f 81       	ldd	r25, Y+7	; 0x07
     540:	83 30       	cpi	r24, 0x03	; 3
     542:	91 05       	cpc	r25, r1
     544:	09 f4       	brne	.+2      	; 0x548 <GPIO_enumGetPinValue+0x7a>
     546:	3d c0       	rjmp	.+122    	; 0x5c2 <GPIO_enumGetPinValue+0xf4>
     548:	51 c0       	rjmp	.+162    	; 0x5ec <GPIO_enumGetPinValue+0x11e>
		{
		case GPIO_PORTA:
			*Ptr_u8PinValue = GET_BIT(PINA, Copy_u8Pin);
     54a:	e9 e3       	ldi	r30, 0x39	; 57
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	28 2f       	mov	r18, r24
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	a9 01       	movw	r20, r18
     55c:	02 c0       	rjmp	.+4      	; 0x562 <GPIO_enumGetPinValue+0x94>
     55e:	55 95       	asr	r21
     560:	47 95       	ror	r20
     562:	8a 95       	dec	r24
     564:	e2 f7       	brpl	.-8      	; 0x55e <GPIO_enumGetPinValue+0x90>
     566:	ca 01       	movw	r24, r20
     568:	81 70       	andi	r24, 0x01	; 1
     56a:	ec 81       	ldd	r30, Y+4	; 0x04
     56c:	fd 81       	ldd	r31, Y+5	; 0x05
     56e:	80 83       	st	Z, r24
     570:	3d c0       	rjmp	.+122    	; 0x5ec <GPIO_enumGetPinValue+0x11e>
			break;
		case GPIO_PORTB:
			*Ptr_u8PinValue = GET_BIT(PINB, Copy_u8Pin);
     572:	e6 e3       	ldi	r30, 0x36	; 54
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	28 2f       	mov	r18, r24
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a9 01       	movw	r20, r18
     584:	02 c0       	rjmp	.+4      	; 0x58a <GPIO_enumGetPinValue+0xbc>
     586:	55 95       	asr	r21
     588:	47 95       	ror	r20
     58a:	8a 95       	dec	r24
     58c:	e2 f7       	brpl	.-8      	; 0x586 <GPIO_enumGetPinValue+0xb8>
     58e:	ca 01       	movw	r24, r20
     590:	81 70       	andi	r24, 0x01	; 1
     592:	ec 81       	ldd	r30, Y+4	; 0x04
     594:	fd 81       	ldd	r31, Y+5	; 0x05
     596:	80 83       	st	Z, r24
     598:	29 c0       	rjmp	.+82     	; 0x5ec <GPIO_enumGetPinValue+0x11e>
			break;
		case GPIO_PORTC:
			*Ptr_u8PinValue = GET_BIT(PINC, Copy_u8Pin);
     59a:	e3 e3       	ldi	r30, 0x33	; 51
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	28 2f       	mov	r18, r24
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	88 2f       	mov	r24, r24
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <GPIO_enumGetPinValue+0xe4>
     5ae:	55 95       	asr	r21
     5b0:	47 95       	ror	r20
     5b2:	8a 95       	dec	r24
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <GPIO_enumGetPinValue+0xe0>
     5b6:	ca 01       	movw	r24, r20
     5b8:	81 70       	andi	r24, 0x01	; 1
     5ba:	ec 81       	ldd	r30, Y+4	; 0x04
     5bc:	fd 81       	ldd	r31, Y+5	; 0x05
     5be:	80 83       	st	Z, r24
     5c0:	15 c0       	rjmp	.+42     	; 0x5ec <GPIO_enumGetPinValue+0x11e>
			break;
		case GPIO_PORTD:
			*Ptr_u8PinValue = GET_BIT(PIND, Copy_u8Pin);
     5c2:	e0 e3       	ldi	r30, 0x30	; 48
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	28 2f       	mov	r18, r24
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	88 2f       	mov	r24, r24
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	a9 01       	movw	r20, r18
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <GPIO_enumGetPinValue+0x10c>
     5d6:	55 95       	asr	r21
     5d8:	47 95       	ror	r20
     5da:	8a 95       	dec	r24
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <GPIO_enumGetPinValue+0x108>
     5de:	ca 01       	movw	r24, r20
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	ec 81       	ldd	r30, Y+4	; 0x04
     5e4:	fd 81       	ldd	r31, Y+5	; 0x05
     5e6:	80 83       	st	Z, r24
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <GPIO_enumGetPinValue+0x11e>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     5ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ee:	27 96       	adiw	r28, 0x07	; 7
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	08 95       	ret

00000600 <GPIO_enumTogglePinValue>:

GPIO_ErrorStatus GPIO_enumTogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
     600:	df 93       	push	r29
     602:	cf 93       	push	r28
     604:	00 d0       	rcall	.+0      	; 0x606 <GPIO_enumTogglePinValue+0x6>
     606:	00 d0       	rcall	.+0      	; 0x608 <GPIO_enumTogglePinValue+0x8>
     608:	0f 92       	push	r0
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	8a 83       	std	Y+2, r24	; 0x02
     610:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Copy_u8Pin <= GPIO_PIN7))
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	84 30       	cpi	r24, 0x04	; 4
     61a:	08 f0       	brcs	.+2      	; 0x61e <GPIO_enumTogglePinValue+0x1e>
     61c:	73 c0       	rjmp	.+230    	; 0x704 <GPIO_enumTogglePinValue+0x104>
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	08 f0       	brcs	.+2      	; 0x626 <GPIO_enumTogglePinValue+0x26>
     624:	6f c0       	rjmp	.+222    	; 0x704 <GPIO_enumTogglePinValue+0x104>
	{
		switch (Copy_u8Port)
     626:	8a 81       	ldd	r24, Y+2	; 0x02
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	3d 83       	std	Y+5, r19	; 0x05
     62e:	2c 83       	std	Y+4, r18	; 0x04
     630:	8c 81       	ldd	r24, Y+4	; 0x04
     632:	9d 81       	ldd	r25, Y+5	; 0x05
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	91 05       	cpc	r25, r1
     638:	49 f1       	breq	.+82     	; 0x68c <GPIO_enumTogglePinValue+0x8c>
     63a:	2c 81       	ldd	r18, Y+4	; 0x04
     63c:	3d 81       	ldd	r19, Y+5	; 0x05
     63e:	22 30       	cpi	r18, 0x02	; 2
     640:	31 05       	cpc	r19, r1
     642:	2c f4       	brge	.+10     	; 0x64e <GPIO_enumTogglePinValue+0x4e>
     644:	8c 81       	ldd	r24, Y+4	; 0x04
     646:	9d 81       	ldd	r25, Y+5	; 0x05
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	61 f0       	breq	.+24     	; 0x664 <GPIO_enumTogglePinValue+0x64>
     64c:	5c c0       	rjmp	.+184    	; 0x706 <GPIO_enumTogglePinValue+0x106>
     64e:	2c 81       	ldd	r18, Y+4	; 0x04
     650:	3d 81       	ldd	r19, Y+5	; 0x05
     652:	22 30       	cpi	r18, 0x02	; 2
     654:	31 05       	cpc	r19, r1
     656:	71 f1       	breq	.+92     	; 0x6b4 <GPIO_enumTogglePinValue+0xb4>
     658:	8c 81       	ldd	r24, Y+4	; 0x04
     65a:	9d 81       	ldd	r25, Y+5	; 0x05
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	91 05       	cpc	r25, r1
     660:	e9 f1       	breq	.+122    	; 0x6dc <GPIO_enumTogglePinValue+0xdc>
     662:	51 c0       	rjmp	.+162    	; 0x706 <GPIO_enumTogglePinValue+0x106>
		{
		case GPIO_PORTA:
			TOGGLE_BIT(PORTA, Copy_u8Pin);
     664:	ab e3       	ldi	r26, 0x3B	; 59
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	eb e3       	ldi	r30, 0x3B	; 59
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	48 2f       	mov	r20, r24
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	28 2f       	mov	r18, r24
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	02 2e       	mov	r0, r18
     67c:	02 c0       	rjmp	.+4      	; 0x682 <GPIO_enumTogglePinValue+0x82>
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	0a 94       	dec	r0
     684:	e2 f7       	brpl	.-8      	; 0x67e <GPIO_enumTogglePinValue+0x7e>
     686:	84 27       	eor	r24, r20
     688:	8c 93       	st	X, r24
     68a:	3d c0       	rjmp	.+122    	; 0x706 <GPIO_enumTogglePinValue+0x106>
			break;
		case GPIO_PORTB:
			TOGGLE_BIT(PORTB, Copy_u8Pin);
     68c:	a8 e3       	ldi	r26, 0x38	; 56
     68e:	b0 e0       	ldi	r27, 0x00	; 0
     690:	e8 e3       	ldi	r30, 0x38	; 56
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	48 2f       	mov	r20, r24
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	28 2f       	mov	r18, r24
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	02 2e       	mov	r0, r18
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <GPIO_enumTogglePinValue+0xaa>
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	0a 94       	dec	r0
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <GPIO_enumTogglePinValue+0xa6>
     6ae:	84 27       	eor	r24, r20
     6b0:	8c 93       	st	X, r24
     6b2:	29 c0       	rjmp	.+82     	; 0x706 <GPIO_enumTogglePinValue+0x106>
			break;
		case GPIO_PORTC:
			TOGGLE_BIT(PORTC, Copy_u8Pin);
     6b4:	a5 e3       	ldi	r26, 0x35	; 53
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	e5 e3       	ldi	r30, 0x35	; 53
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	48 2f       	mov	r20, r24
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	02 2e       	mov	r0, r18
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <GPIO_enumTogglePinValue+0xd2>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	0a 94       	dec	r0
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <GPIO_enumTogglePinValue+0xce>
     6d6:	84 27       	eor	r24, r20
     6d8:	8c 93       	st	X, r24
     6da:	15 c0       	rjmp	.+42     	; 0x706 <GPIO_enumTogglePinValue+0x106>
			break;
		case GPIO_PORTD:
			TOGGLE_BIT(PORTD, Copy_u8Pin);
     6dc:	a2 e3       	ldi	r26, 0x32	; 50
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e2 e3       	ldi	r30, 0x32	; 50
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	48 2f       	mov	r20, r24
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	28 2f       	mov	r18, r24
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	02 2e       	mov	r0, r18
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <GPIO_enumTogglePinValue+0xfa>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <GPIO_enumTogglePinValue+0xf6>
     6fe:	84 27       	eor	r24, r20
     700:	8c 93       	st	X, r24
     702:	01 c0       	rjmp	.+2      	; 0x706 <GPIO_enumTogglePinValue+0x106>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     704:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     706:	89 81       	ldd	r24, Y+1	; 0x01
}
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	08 95       	ret

00000718 <GPIO_enumSetPortDirection>:

GPIO_ErrorStatus GPIO_enumSetPortDirection(u8 Copy_u8Port, u8 Copy_u8PrtDirection)
{
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	00 d0       	rcall	.+0      	; 0x71e <GPIO_enumSetPortDirection+0x6>
     71e:	00 d0       	rcall	.+0      	; 0x720 <GPIO_enumSetPortDirection+0x8>
     720:	0f 92       	push	r0
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	8a 83       	std	Y+2, r24	; 0x02
     728:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Copy_u8PrtDirection <= 0xFF))
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	84 30       	cpi	r24, 0x04	; 4
     732:	98 f5       	brcc	.+102    	; 0x79a <GPIO_enumSetPortDirection+0x82>
	{
		switch (Copy_u8Port)
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	28 2f       	mov	r18, r24
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	3d 83       	std	Y+5, r19	; 0x05
     73c:	2c 83       	std	Y+4, r18	; 0x04
     73e:	8c 81       	ldd	r24, Y+4	; 0x04
     740:	9d 81       	ldd	r25, Y+5	; 0x05
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	91 05       	cpc	r25, r1
     746:	d1 f0       	breq	.+52     	; 0x77c <GPIO_enumSetPortDirection+0x64>
     748:	2c 81       	ldd	r18, Y+4	; 0x04
     74a:	3d 81       	ldd	r19, Y+5	; 0x05
     74c:	22 30       	cpi	r18, 0x02	; 2
     74e:	31 05       	cpc	r19, r1
     750:	2c f4       	brge	.+10     	; 0x75c <GPIO_enumSetPortDirection+0x44>
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	9d 81       	ldd	r25, Y+5	; 0x05
     756:	00 97       	sbiw	r24, 0x00	; 0
     758:	61 f0       	breq	.+24     	; 0x772 <GPIO_enumSetPortDirection+0x5a>
     75a:	20 c0       	rjmp	.+64     	; 0x79c <GPIO_enumSetPortDirection+0x84>
     75c:	2c 81       	ldd	r18, Y+4	; 0x04
     75e:	3d 81       	ldd	r19, Y+5	; 0x05
     760:	22 30       	cpi	r18, 0x02	; 2
     762:	31 05       	cpc	r19, r1
     764:	81 f0       	breq	.+32     	; 0x786 <GPIO_enumSetPortDirection+0x6e>
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	9d 81       	ldd	r25, Y+5	; 0x05
     76a:	83 30       	cpi	r24, 0x03	; 3
     76c:	91 05       	cpc	r25, r1
     76e:	81 f0       	breq	.+32     	; 0x790 <GPIO_enumSetPortDirection+0x78>
     770:	15 c0       	rjmp	.+42     	; 0x79c <GPIO_enumSetPortDirection+0x84>
		{
		case GPIO_PORTA:
			DDRA = Copy_u8PrtDirection;
     772:	ea e3       	ldi	r30, 0x3A	; 58
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	80 83       	st	Z, r24
     77a:	10 c0       	rjmp	.+32     	; 0x79c <GPIO_enumSetPortDirection+0x84>
			break;
		case GPIO_PORTB:
			DDRB = Copy_u8PrtDirection;
     77c:	e7 e3       	ldi	r30, 0x37	; 55
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	80 83       	st	Z, r24
     784:	0b c0       	rjmp	.+22     	; 0x79c <GPIO_enumSetPortDirection+0x84>
			break;
		case GPIO_PORTC:
			DDRC = Copy_u8PrtDirection;
     786:	e4 e3       	ldi	r30, 0x34	; 52
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	80 83       	st	Z, r24
     78e:	06 c0       	rjmp	.+12     	; 0x79c <GPIO_enumSetPortDirection+0x84>
			break;
		case GPIO_PORTD:
			DDRD = Copy_u8PrtDirection;
     790:	e1 e3       	ldi	r30, 0x31	; 49
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	80 83       	st	Z, r24
     798:	01 c0       	rjmp	.+2      	; 0x79c <GPIO_enumSetPortDirection+0x84>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     79a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
}
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	cf 91       	pop	r28
     7aa:	df 91       	pop	r29
     7ac:	08 95       	ret

000007ae <GPIO_enumSetPortValue>:

GPIO_ErrorStatus GPIO_enumSetPortValue(u8 Copy_u8Port, u8 Copy_u8PortValue)
{
     7ae:	df 93       	push	r29
     7b0:	cf 93       	push	r28
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <GPIO_enumSetPortValue+0x6>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <GPIO_enumSetPortValue+0x8>
     7b6:	0f 92       	push	r0
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	8a 83       	std	Y+2, r24	; 0x02
     7be:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Copy_u8PortValue <= 0xFF))
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	84 30       	cpi	r24, 0x04	; 4
     7c8:	98 f5       	brcc	.+102    	; 0x830 <GPIO_enumSetPortValue+0x82>
	{
		switch (Copy_u8Port)
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	28 2f       	mov	r18, r24
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	3d 83       	std	Y+5, r19	; 0x05
     7d2:	2c 83       	std	Y+4, r18	; 0x04
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	9d 81       	ldd	r25, Y+5	; 0x05
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	91 05       	cpc	r25, r1
     7dc:	d1 f0       	breq	.+52     	; 0x812 <GPIO_enumSetPortValue+0x64>
     7de:	2c 81       	ldd	r18, Y+4	; 0x04
     7e0:	3d 81       	ldd	r19, Y+5	; 0x05
     7e2:	22 30       	cpi	r18, 0x02	; 2
     7e4:	31 05       	cpc	r19, r1
     7e6:	2c f4       	brge	.+10     	; 0x7f2 <GPIO_enumSetPortValue+0x44>
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	9d 81       	ldd	r25, Y+5	; 0x05
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	61 f0       	breq	.+24     	; 0x808 <GPIO_enumSetPortValue+0x5a>
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <GPIO_enumSetPortValue+0x84>
     7f2:	2c 81       	ldd	r18, Y+4	; 0x04
     7f4:	3d 81       	ldd	r19, Y+5	; 0x05
     7f6:	22 30       	cpi	r18, 0x02	; 2
     7f8:	31 05       	cpc	r19, r1
     7fa:	81 f0       	breq	.+32     	; 0x81c <GPIO_enumSetPortValue+0x6e>
     7fc:	8c 81       	ldd	r24, Y+4	; 0x04
     7fe:	9d 81       	ldd	r25, Y+5	; 0x05
     800:	83 30       	cpi	r24, 0x03	; 3
     802:	91 05       	cpc	r25, r1
     804:	81 f0       	breq	.+32     	; 0x826 <GPIO_enumSetPortValue+0x78>
     806:	15 c0       	rjmp	.+42     	; 0x832 <GPIO_enumSetPortValue+0x84>
		{
		case GPIO_PORTA:
			PORTA = Copy_u8PortValue;
     808:	eb e3       	ldi	r30, 0x3B	; 59
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	80 83       	st	Z, r24
     810:	10 c0       	rjmp	.+32     	; 0x832 <GPIO_enumSetPortValue+0x84>
			break;
		case GPIO_PORTB:
			PORTB = Copy_u8PortValue;
     812:	e8 e3       	ldi	r30, 0x38	; 56
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	80 83       	st	Z, r24
     81a:	0b c0       	rjmp	.+22     	; 0x832 <GPIO_enumSetPortValue+0x84>
			break;
		case GPIO_PORTC:
			PORTC = Copy_u8PortValue;
     81c:	e5 e3       	ldi	r30, 0x35	; 53
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	80 83       	st	Z, r24
     824:	06 c0       	rjmp	.+12     	; 0x832 <GPIO_enumSetPortValue+0x84>
			break;
		case GPIO_PORTD:
			PORTD = Copy_u8PortValue;
     826:	e2 e3       	ldi	r30, 0x32	; 50
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	80 83       	st	Z, r24
     82e:	01 c0       	rjmp	.+2      	; 0x832 <GPIO_enumSetPortValue+0x84>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     830:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     832:	89 81       	ldd	r24, Y+1	; 0x01
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <GPIO_enumGetPortValue>:

GPIO_ErrorStatus GPIO_enumGetPortValue(u8 Copy_u8Port, u8 *Ptr_u8PortValue)
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	00 d0       	rcall	.+0      	; 0x84a <GPIO_enumGetPortValue+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <GPIO_enumGetPortValue+0x8>
     84c:	00 d0       	rcall	.+0      	; 0x84e <GPIO_enumGetPortValue+0xa>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	8a 83       	std	Y+2, r24	; 0x02
     854:	7c 83       	std	Y+4, r23	; 0x04
     856:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8Port <= GPIO_PORTD) && (Ptr_u8PortValue != NULL))
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	84 30       	cpi	r24, 0x04	; 4
     860:	08 f0       	brcs	.+2      	; 0x864 <__stack+0x5>
     862:	3f c0       	rjmp	.+126    	; 0x8e2 <__stack+0x83>
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	9c 81       	ldd	r25, Y+4	; 0x04
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	d9 f1       	breq	.+118    	; 0x8e2 <__stack+0x83>
	{
		switch (Copy_u8Port)
     86c:	8a 81       	ldd	r24, Y+2	; 0x02
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	3e 83       	std	Y+6, r19	; 0x06
     874:	2d 83       	std	Y+5, r18	; 0x05
     876:	8d 81       	ldd	r24, Y+5	; 0x05
     878:	9e 81       	ldd	r25, Y+6	; 0x06
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	91 05       	cpc	r25, r1
     87e:	e1 f0       	breq	.+56     	; 0x8b8 <__stack+0x59>
     880:	2d 81       	ldd	r18, Y+5	; 0x05
     882:	3e 81       	ldd	r19, Y+6	; 0x06
     884:	22 30       	cpi	r18, 0x02	; 2
     886:	31 05       	cpc	r19, r1
     888:	2c f4       	brge	.+10     	; 0x894 <__stack+0x35>
     88a:	8d 81       	ldd	r24, Y+5	; 0x05
     88c:	9e 81       	ldd	r25, Y+6	; 0x06
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	61 f0       	breq	.+24     	; 0x8aa <__stack+0x4b>
     892:	28 c0       	rjmp	.+80     	; 0x8e4 <__stack+0x85>
     894:	2d 81       	ldd	r18, Y+5	; 0x05
     896:	3e 81       	ldd	r19, Y+6	; 0x06
     898:	22 30       	cpi	r18, 0x02	; 2
     89a:	31 05       	cpc	r19, r1
     89c:	a1 f0       	breq	.+40     	; 0x8c6 <__stack+0x67>
     89e:	8d 81       	ldd	r24, Y+5	; 0x05
     8a0:	9e 81       	ldd	r25, Y+6	; 0x06
     8a2:	83 30       	cpi	r24, 0x03	; 3
     8a4:	91 05       	cpc	r25, r1
     8a6:	b1 f0       	breq	.+44     	; 0x8d4 <__stack+0x75>
     8a8:	1d c0       	rjmp	.+58     	; 0x8e4 <__stack+0x85>
		{
		case GPIO_PORTA:
			*Ptr_u8PortValue = PINA;
     8aa:	e9 e3       	ldi	r30, 0x39	; 57
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	eb 81       	ldd	r30, Y+3	; 0x03
     8b2:	fc 81       	ldd	r31, Y+4	; 0x04
     8b4:	80 83       	st	Z, r24
     8b6:	16 c0       	rjmp	.+44     	; 0x8e4 <__stack+0x85>
			break;
		case GPIO_PORTB:
			*Ptr_u8PortValue = PINB;
     8b8:	e6 e3       	ldi	r30, 0x36	; 54
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	eb 81       	ldd	r30, Y+3	; 0x03
     8c0:	fc 81       	ldd	r31, Y+4	; 0x04
     8c2:	80 83       	st	Z, r24
     8c4:	0f c0       	rjmp	.+30     	; 0x8e4 <__stack+0x85>
			break;
		case GPIO_PORTC:
			*Ptr_u8PortValue = PINC;
     8c6:	e3 e3       	ldi	r30, 0x33	; 51
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	eb 81       	ldd	r30, Y+3	; 0x03
     8ce:	fc 81       	ldd	r31, Y+4	; 0x04
     8d0:	80 83       	st	Z, r24
     8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <__stack+0x85>
			break;
		case GPIO_PORTD:
			*Ptr_u8PortValue = PIND;
     8d4:	e0 e3       	ldi	r30, 0x30	; 48
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	eb 81       	ldd	r30, Y+3	; 0x03
     8dc:	fc 81       	ldd	r31, Y+4	; 0x04
     8de:	80 83       	st	Z, r24
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__stack+0x85>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     8e2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     8e4:	89 81       	ldd	r24, Y+1	; 0x01
}
     8e6:	26 96       	adiw	r28, 0x06	; 6
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	cf 91       	pop	r28
     8f4:	df 91       	pop	r29
     8f6:	08 95       	ret

000008f8 <GPIO_enumTogglePortValue>:

GPIO_ErrorStatus GPIO_enumTogglePortValue(u8 Copy_u8Port)
{
     8f8:	df 93       	push	r29
     8fa:	cf 93       	push	r28
     8fc:	00 d0       	rcall	.+0      	; 0x8fe <GPIO_enumTogglePortValue+0x6>
     8fe:	00 d0       	rcall	.+0      	; 0x900 <GPIO_enumTogglePortValue+0x8>
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Port <= GPIO_PORTD)
     90a:	8a 81       	ldd	r24, Y+2	; 0x02
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	08 f0       	brcs	.+2      	; 0x912 <GPIO_enumTogglePortValue+0x1a>
     910:	3f c0       	rjmp	.+126    	; 0x990 <GPIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8Port)
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	28 2f       	mov	r18, r24
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	3c 83       	std	Y+4, r19	; 0x04
     91a:	2b 83       	std	Y+3, r18	; 0x03
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	9c 81       	ldd	r25, Y+4	; 0x04
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	91 05       	cpc	r25, r1
     924:	e9 f0       	breq	.+58     	; 0x960 <GPIO_enumTogglePortValue+0x68>
     926:	2b 81       	ldd	r18, Y+3	; 0x03
     928:	3c 81       	ldd	r19, Y+4	; 0x04
     92a:	22 30       	cpi	r18, 0x02	; 2
     92c:	31 05       	cpc	r19, r1
     92e:	2c f4       	brge	.+10     	; 0x93a <GPIO_enumTogglePortValue+0x42>
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	9c 81       	ldd	r25, Y+4	; 0x04
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	61 f0       	breq	.+24     	; 0x950 <GPIO_enumTogglePortValue+0x58>
     938:	2c c0       	rjmp	.+88     	; 0x992 <GPIO_enumTogglePortValue+0x9a>
     93a:	2b 81       	ldd	r18, Y+3	; 0x03
     93c:	3c 81       	ldd	r19, Y+4	; 0x04
     93e:	22 30       	cpi	r18, 0x02	; 2
     940:	31 05       	cpc	r19, r1
     942:	b1 f0       	breq	.+44     	; 0x970 <GPIO_enumTogglePortValue+0x78>
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	9c 81       	ldd	r25, Y+4	; 0x04
     948:	83 30       	cpi	r24, 0x03	; 3
     94a:	91 05       	cpc	r25, r1
     94c:	c9 f0       	breq	.+50     	; 0x980 <GPIO_enumTogglePortValue+0x88>
     94e:	21 c0       	rjmp	.+66     	; 0x992 <GPIO_enumTogglePortValue+0x9a>
		{
		case GPIO_PORTA:
			PORTA ^= 0xFF;
     950:	ab e3       	ldi	r26, 0x3B	; 59
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	eb e3       	ldi	r30, 0x3B	; 59
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	80 95       	com	r24
     95c:	8c 93       	st	X, r24
     95e:	19 c0       	rjmp	.+50     	; 0x992 <GPIO_enumTogglePortValue+0x9a>
			break;
		case GPIO_PORTB:
			PORTB ^= 0xFF;
     960:	a8 e3       	ldi	r26, 0x38	; 56
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	e8 e3       	ldi	r30, 0x38	; 56
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	80 95       	com	r24
     96c:	8c 93       	st	X, r24
     96e:	11 c0       	rjmp	.+34     	; 0x992 <GPIO_enumTogglePortValue+0x9a>
			break;
		case GPIO_PORTC:
			PORTC ^= 0xFF;
     970:	a5 e3       	ldi	r26, 0x35	; 53
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	e5 e3       	ldi	r30, 0x35	; 53
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	80 95       	com	r24
     97c:	8c 93       	st	X, r24
     97e:	09 c0       	rjmp	.+18     	; 0x992 <GPIO_enumTogglePortValue+0x9a>
			break;
		case GPIO_PORTD:
			PORTD ^= 0xFF;
     980:	a2 e3       	ldi	r26, 0x32	; 50
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	e2 e3       	ldi	r30, 0x32	; 50
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	80 95       	com	r24
     98c:	8c 93       	st	X, r24
     98e:	01 c0       	rjmp	.+2      	; 0x992 <GPIO_enumTogglePortValue+0x9a>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     990:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     992:	89 81       	ldd	r24, Y+1	; 0x01
}
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <GPIO_enumWriteHighNibbles>:

GPIO_ErrorStatus GPIO_enumWriteHighNibbles(u8 Copy_u8Port, u8 Copy_u8Value)
{
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <GPIO_enumWriteHighNibbles+0x6>
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <GPIO_enumWriteHighNibbles+0x8>
     9aa:	0f 92       	push	r0
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	8a 83       	std	Y+2, r24	; 0x02
     9b2:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Port <= GPIO_PORTD)
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	84 30       	cpi	r24, 0x04	; 4
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <GPIO_enumWriteHighNibbles+0x1e>
     9be:	88 c0       	rjmp	.+272    	; 0xad0 <GPIO_enumWriteHighNibbles+0x12e>
	{
		switch (Copy_u8Port)
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	3d 83       	std	Y+5, r19	; 0x05
     9c8:	2c 83       	std	Y+4, r18	; 0x04
     9ca:	8c 81       	ldd	r24, Y+4	; 0x04
     9cc:	9d 81       	ldd	r25, Y+5	; 0x05
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	91 05       	cpc	r25, r1
     9d2:	81 f1       	breq	.+96     	; 0xa34 <GPIO_enumWriteHighNibbles+0x92>
     9d4:	2c 81       	ldd	r18, Y+4	; 0x04
     9d6:	3d 81       	ldd	r19, Y+5	; 0x05
     9d8:	22 30       	cpi	r18, 0x02	; 2
     9da:	31 05       	cpc	r19, r1
     9dc:	2c f4       	brge	.+10     	; 0x9e8 <GPIO_enumWriteHighNibbles+0x46>
     9de:	8c 81       	ldd	r24, Y+4	; 0x04
     9e0:	9d 81       	ldd	r25, Y+5	; 0x05
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	69 f0       	breq	.+26     	; 0xa00 <GPIO_enumWriteHighNibbles+0x5e>
     9e6:	75 c0       	rjmp	.+234    	; 0xad2 <GPIO_enumWriteHighNibbles+0x130>
     9e8:	2c 81       	ldd	r18, Y+4	; 0x04
     9ea:	3d 81       	ldd	r19, Y+5	; 0x05
     9ec:	22 30       	cpi	r18, 0x02	; 2
     9ee:	31 05       	cpc	r19, r1
     9f0:	d9 f1       	breq	.+118    	; 0xa68 <GPIO_enumWriteHighNibbles+0xc6>
     9f2:	8c 81       	ldd	r24, Y+4	; 0x04
     9f4:	9d 81       	ldd	r25, Y+5	; 0x05
     9f6:	83 30       	cpi	r24, 0x03	; 3
     9f8:	91 05       	cpc	r25, r1
     9fa:	09 f4       	brne	.+2      	; 0x9fe <GPIO_enumWriteHighNibbles+0x5c>
     9fc:	4f c0       	rjmp	.+158    	; 0xa9c <GPIO_enumWriteHighNibbles+0xfa>
     9fe:	69 c0       	rjmp	.+210    	; 0xad2 <GPIO_enumWriteHighNibbles+0x130>
		{
		case GPIO_PORTA:
			DDRA |= 0xF0;
     a00:	aa e3       	ldi	r26, 0x3A	; 58
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	ea e3       	ldi	r30, 0x3A	; 58
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	80 6f       	ori	r24, 0xF0	; 240
     a0c:	8c 93       	st	X, r24
			PORTA = ((PORTA & 0x0F) | (Copy_u8Value << 4));
     a0e:	ab e3       	ldi	r26, 0x3B	; 59
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	eb e3       	ldi	r30, 0x3B	; 59
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	28 2f       	mov	r18, r24
     a1a:	2f 70       	andi	r18, 0x0F	; 15
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	82 95       	swap	r24
     a24:	92 95       	swap	r25
     a26:	90 7f       	andi	r25, 0xF0	; 240
     a28:	98 27       	eor	r25, r24
     a2a:	80 7f       	andi	r24, 0xF0	; 240
     a2c:	98 27       	eor	r25, r24
     a2e:	82 2b       	or	r24, r18
     a30:	8c 93       	st	X, r24
     a32:	4f c0       	rjmp	.+158    	; 0xad2 <GPIO_enumWriteHighNibbles+0x130>
			break;
		case GPIO_PORTB:
			DDRB |= 0xF0;
     a34:	a7 e3       	ldi	r26, 0x37	; 55
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	e7 e3       	ldi	r30, 0x37	; 55
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	80 6f       	ori	r24, 0xF0	; 240
     a40:	8c 93       	st	X, r24
			PORTB = ((PORTB & 0x0F) | (Copy_u8Value << 4));
     a42:	a8 e3       	ldi	r26, 0x38	; 56
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 e3       	ldi	r30, 0x38	; 56
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	28 2f       	mov	r18, r24
     a4e:	2f 70       	andi	r18, 0x0F	; 15
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	82 95       	swap	r24
     a58:	92 95       	swap	r25
     a5a:	90 7f       	andi	r25, 0xF0	; 240
     a5c:	98 27       	eor	r25, r24
     a5e:	80 7f       	andi	r24, 0xF0	; 240
     a60:	98 27       	eor	r25, r24
     a62:	82 2b       	or	r24, r18
     a64:	8c 93       	st	X, r24
     a66:	35 c0       	rjmp	.+106    	; 0xad2 <GPIO_enumWriteHighNibbles+0x130>
			break;
		case GPIO_PORTC:
			DDRC |= 0xF0;
     a68:	a4 e3       	ldi	r26, 0x34	; 52
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	e4 e3       	ldi	r30, 0x34	; 52
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	80 6f       	ori	r24, 0xF0	; 240
     a74:	8c 93       	st	X, r24
			PORTC = ((PORTC & 0x0F) | (Copy_u8Value << 4));
     a76:	a5 e3       	ldi	r26, 0x35	; 53
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e5 e3       	ldi	r30, 0x35	; 53
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	28 2f       	mov	r18, r24
     a82:	2f 70       	andi	r18, 0x0F	; 15
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	82 95       	swap	r24
     a8c:	92 95       	swap	r25
     a8e:	90 7f       	andi	r25, 0xF0	; 240
     a90:	98 27       	eor	r25, r24
     a92:	80 7f       	andi	r24, 0xF0	; 240
     a94:	98 27       	eor	r25, r24
     a96:	82 2b       	or	r24, r18
     a98:	8c 93       	st	X, r24
     a9a:	1b c0       	rjmp	.+54     	; 0xad2 <GPIO_enumWriteHighNibbles+0x130>
			break;
		case GPIO_PORTD:
			DDRD |= 0xF0;
     a9c:	a1 e3       	ldi	r26, 0x31	; 49
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e1 e3       	ldi	r30, 0x31	; 49
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	80 6f       	ori	r24, 0xF0	; 240
     aa8:	8c 93       	st	X, r24
			PORTD = ((PORTD & 0x0F) | (Copy_u8Value << 4));
     aaa:	a2 e3       	ldi	r26, 0x32	; 50
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	e2 e3       	ldi	r30, 0x32	; 50
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	28 2f       	mov	r18, r24
     ab6:	2f 70       	andi	r18, 0x0F	; 15
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	88 2f       	mov	r24, r24
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	82 95       	swap	r24
     ac0:	92 95       	swap	r25
     ac2:	90 7f       	andi	r25, 0xF0	; 240
     ac4:	98 27       	eor	r25, r24
     ac6:	80 7f       	andi	r24, 0xF0	; 240
     ac8:	98 27       	eor	r25, r24
     aca:	82 2b       	or	r24, r18
     acc:	8c 93       	st	X, r24
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <GPIO_enumWriteHighNibbles+0x130>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     ad0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	cf 91       	pop	r28
     ae0:	df 91       	pop	r29
     ae2:	08 95       	ret

00000ae4 <GPIO_enumWriteLowNibbles>:

GPIO_ErrorStatus GPIO_enumWriteLowNibbles(u8 Copy_u8Port, u8 Copy_u8Value)
{
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	00 d0       	rcall	.+0      	; 0xaea <GPIO_enumWriteLowNibbles+0x6>
     aea:	00 d0       	rcall	.+0      	; 0xaec <GPIO_enumWriteLowNibbles+0x8>
     aec:	0f 92       	push	r0
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	8a 83       	std	Y+2, r24	; 0x02
     af4:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_ErrorStatus LOC_enumState = GPIO_OK;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Port <= GPIO_PORTD)
     afa:	8a 81       	ldd	r24, Y+2	; 0x02
     afc:	84 30       	cpi	r24, 0x04	; 4
     afe:	08 f0       	brcs	.+2      	; 0xb02 <GPIO_enumWriteLowNibbles+0x1e>
     b00:	74 c0       	rjmp	.+232    	; 0xbea <GPIO_enumWriteLowNibbles+0x106>
	{
		switch (Copy_u8Port)
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	3d 83       	std	Y+5, r19	; 0x05
     b0a:	2c 83       	std	Y+4, r18	; 0x04
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	9d 81       	ldd	r25, Y+5	; 0x05
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	91 05       	cpc	r25, r1
     b14:	59 f1       	breq	.+86     	; 0xb6c <GPIO_enumWriteLowNibbles+0x88>
     b16:	2c 81       	ldd	r18, Y+4	; 0x04
     b18:	3d 81       	ldd	r19, Y+5	; 0x05
     b1a:	22 30       	cpi	r18, 0x02	; 2
     b1c:	31 05       	cpc	r19, r1
     b1e:	2c f4       	brge	.+10     	; 0xb2a <GPIO_enumWriteLowNibbles+0x46>
     b20:	8c 81       	ldd	r24, Y+4	; 0x04
     b22:	9d 81       	ldd	r25, Y+5	; 0x05
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	69 f0       	breq	.+26     	; 0xb42 <GPIO_enumWriteLowNibbles+0x5e>
     b28:	61 c0       	rjmp	.+194    	; 0xbec <GPIO_enumWriteLowNibbles+0x108>
     b2a:	2c 81       	ldd	r18, Y+4	; 0x04
     b2c:	3d 81       	ldd	r19, Y+5	; 0x05
     b2e:	22 30       	cpi	r18, 0x02	; 2
     b30:	31 05       	cpc	r19, r1
     b32:	89 f1       	breq	.+98     	; 0xb96 <GPIO_enumWriteLowNibbles+0xb2>
     b34:	8c 81       	ldd	r24, Y+4	; 0x04
     b36:	9d 81       	ldd	r25, Y+5	; 0x05
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	91 05       	cpc	r25, r1
     b3c:	09 f4       	brne	.+2      	; 0xb40 <GPIO_enumWriteLowNibbles+0x5c>
     b3e:	40 c0       	rjmp	.+128    	; 0xbc0 <GPIO_enumWriteLowNibbles+0xdc>
     b40:	55 c0       	rjmp	.+170    	; 0xbec <GPIO_enumWriteLowNibbles+0x108>
		{
		case GPIO_PORTA:
			DDRA |= 0x0F;
     b42:	aa e3       	ldi	r26, 0x3A	; 58
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	ea e3       	ldi	r30, 0x3A	; 58
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 60       	ori	r24, 0x0F	; 15
     b4e:	8c 93       	st	X, r24
			PORTA = ((PORTA & 0xF0) | (Copy_u8Value &= 0x0F));
     b50:	ab e3       	ldi	r26, 0x3B	; 59
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	eb e3       	ldi	r30, 0x3B	; 59
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	98 2f       	mov	r25, r24
     b5c:	90 7f       	andi	r25, 0xF0	; 240
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	8f 70       	andi	r24, 0x0F	; 15
     b62:	8b 83       	std	Y+3, r24	; 0x03
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	89 2b       	or	r24, r25
     b68:	8c 93       	st	X, r24
     b6a:	40 c0       	rjmp	.+128    	; 0xbec <GPIO_enumWriteLowNibbles+0x108>
			break;
		case GPIO_PORTB:
			DDRB |= 0x0F;
     b6c:	a7 e3       	ldi	r26, 0x37	; 55
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e7 e3       	ldi	r30, 0x37	; 55
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8f 60       	ori	r24, 0x0F	; 15
     b78:	8c 93       	st	X, r24
			PORTB = ((PORTB & 0xF0) | (Copy_u8Value &= 0x0F));
     b7a:	a8 e3       	ldi	r26, 0x38	; 56
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e8 e3       	ldi	r30, 0x38	; 56
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	98 2f       	mov	r25, r24
     b86:	90 7f       	andi	r25, 0xF0	; 240
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	8f 70       	andi	r24, 0x0F	; 15
     b8c:	8b 83       	std	Y+3, r24	; 0x03
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	89 2b       	or	r24, r25
     b92:	8c 93       	st	X, r24
     b94:	2b c0       	rjmp	.+86     	; 0xbec <GPIO_enumWriteLowNibbles+0x108>
			break;
		case GPIO_PORTC:
			DDRC |= 0x0F;
     b96:	a4 e3       	ldi	r26, 0x34	; 52
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e4 e3       	ldi	r30, 0x34	; 52
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 60       	ori	r24, 0x0F	; 15
     ba2:	8c 93       	st	X, r24
			PORTC = ((PORTC & 0xF0) | (Copy_u8Value &= 0x0F));
     ba4:	a5 e3       	ldi	r26, 0x35	; 53
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e5 e3       	ldi	r30, 0x35	; 53
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	98 2f       	mov	r25, r24
     bb0:	90 7f       	andi	r25, 0xF0	; 240
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	8b 83       	std	Y+3, r24	; 0x03
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	89 2b       	or	r24, r25
     bbc:	8c 93       	st	X, r24
     bbe:	16 c0       	rjmp	.+44     	; 0xbec <GPIO_enumWriteLowNibbles+0x108>
			break;
		case GPIO_PORTD:
			DDRB |= 0x0F;
     bc0:	a7 e3       	ldi	r26, 0x37	; 55
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e7 e3       	ldi	r30, 0x37	; 55
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	8f 60       	ori	r24, 0x0F	; 15
     bcc:	8c 93       	st	X, r24
			PORTD = ((PORTD & 0xF0) | (Copy_u8Value &= 0x0F));
     bce:	a2 e3       	ldi	r26, 0x32	; 50
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e2 e3       	ldi	r30, 0x32	; 50
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	98 2f       	mov	r25, r24
     bda:	90 7f       	andi	r25, 0xF0	; 240
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	8b 83       	std	Y+3, r24	; 0x03
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	89 2b       	or	r24, r25
     be6:	8c 93       	st	X, r24
     be8:	01 c0       	rjmp	.+2      	; 0xbec <GPIO_enumWriteLowNibbles+0x108>
			break;
		}
	}
	else
	{
		LOC_enumState = GPIO_NOK;
     bea:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <SW_voidInit>:

#include "Sw_interface.h"
#include "../../MCAL/GPIO/GPIO_interface.h"

void SW_voidInit(SW_Type SW_Config)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <SW_voidInit+0x6>
     c04:	0f 92       	push	r0
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	69 83       	std	Y+1, r22	; 0x01
     c0c:	7a 83       	std	Y+2, r23	; 0x02
     c0e:	8b 83       	std	Y+3, r24	; 0x03
    GPIO_enumSetPinDirection(SW_Config.Port, SW_Config.Pin, GPIO_PIN_INPUT);
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	69 2f       	mov	r22, r25
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <SW_u8GetPressed>:

u8 SW_u8GetPressed(SW_Type SW_Config)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <SW_u8GetPressed+0x6>
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <SW_u8GetPressed+0x8>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	6b 83       	std	Y+3, r22	; 0x03
     c38:	7c 83       	std	Y+4, r23	; 0x04
     c3a:	8d 83       	std	Y+5, r24	; 0x05
    u8 LOC_u8PinValue = SW_RELESED;
     c3c:	1a 82       	std	Y+2, r1	; 0x02
    u8 LOC_u8Result = SW_RELESED;
     c3e:	19 82       	std	Y+1, r1	; 0x01
    GPIO_enumGetPinValue(SW_Config.Port, SW_Config.Pin, &LOC_u8PinValue);
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	9e 01       	movw	r18, r28
     c46:	2e 5f       	subi	r18, 0xFE	; 254
     c48:	3f 4f       	sbci	r19, 0xFF	; 255
     c4a:	69 2f       	mov	r22, r25
     c4c:	a9 01       	movw	r20, r18
     c4e:	0e 94 67 02 	call	0x4ce	; 0x4ce <GPIO_enumGetPinValue>
    if (SW_Config.PullState == SW_PULL_UP)
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	88 23       	and	r24, r24
     c56:	59 f4       	brne	.+22     	; 0xc6e <SW_u8GetPressed+0x46>
    {
        if (LOC_u8PinValue == 0)
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	88 23       	and	r24, r24
     c5c:	19 f4       	brne	.+6      	; 0xc64 <SW_u8GetPressed+0x3c>
        {
            LOC_u8Result = SW_PRESSED;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	12 c0       	rjmp	.+36     	; 0xc88 <SW_u8GetPressed+0x60>
        }
        else if (LOC_u8PinValue == 1)
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	79 f4       	brne	.+30     	; 0xc88 <SW_u8GetPressed+0x60>
        {
            LOC_u8Result = SW_RELESED;
     c6a:	19 82       	std	Y+1, r1	; 0x01
     c6c:	0d c0       	rjmp	.+26     	; 0xc88 <SW_u8GetPressed+0x60>
        }
    }
    else if (SW_Config.PullState == SW_PULL_DOWN)
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	51 f4       	brne	.+20     	; 0xc88 <SW_u8GetPressed+0x60>
    {
        if (LOC_u8PinValue == 0)
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	88 23       	and	r24, r24
     c78:	11 f4       	brne	.+4      	; 0xc7e <SW_u8GetPressed+0x56>
        {
            LOC_u8Result = SW_RELESED;
     c7a:	19 82       	std	Y+1, r1	; 0x01
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <SW_u8GetPressed+0x60>
        }
        else if (LOC_u8PinValue == 1)
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	11 f4       	brne	.+4      	; 0xc88 <SW_u8GetPressed+0x60>
        {
            LOC_u8Result = SW_PRESSED;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    return LOC_u8Result;
     c88:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <SSD_voidInitDataPort>:
#include "SSD_private.h"

static u8 Local_u8SSDNumbers[10] = SSD_NMUBER_ARR;

void SSD_voidInitDataPort(SSD_Type Copy_structConfig)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <SSD_voidInitDataPort+0x6>
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <SSD_voidInitDataPort+0x8>
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	69 83       	std	Y+1, r22	; 0x01
     ca8:	7a 83       	std	Y+2, r23	; 0x02
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	9c 83       	std	Y+4, r25	; 0x04
    GPIO_enumSetPortDirection(Copy_structConfig.DataPort, GPIO_PORT_OUTPUT);
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	6f ef       	ldi	r22, 0xFF	; 255
     cb2:	0e 94 8c 03 	call	0x718	; 0x718 <GPIO_enumSetPortDirection>
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type Copy_structConfig)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <SSD_voidEnable+0x6>
     cca:	00 d0       	rcall	.+0      	; 0xccc <SSD_voidEnable+0x8>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	69 83       	std	Y+1, r22	; 0x01
     cd2:	7a 83       	std	Y+2, r23	; 0x02
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	9c 83       	std	Y+4, r25	; 0x04
    if (Copy_structConfig.Type == COMMON_ANODE)
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 23       	and	r24, r24
     cdc:	69 f4       	brne	.+26     	; 0xcf8 <SSD_voidEnable+0x34>
    {
        GPIO_enumSetPinDirection(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_OUTPUT);
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	69 2f       	mov	r22, r25
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
        GPIO_enumSetPinValue(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_HIGH);
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	69 2f       	mov	r22, r25
     cf0:	41 e0       	ldi	r20, 0x01	; 1
     cf2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
     cf6:	0f c0       	rjmp	.+30     	; 0xd16 <SSD_voidEnable+0x52>
    }
    else if (Copy_structConfig.Type == COMMON_CATHOD)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	61 f4       	brne	.+24     	; 0xd16 <SSD_voidEnable+0x52>
    {
        GPIO_enumSetPinDirection(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_OUTPUT);
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	69 2f       	mov	r22, r25
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
        GPIO_enumSetPinValue(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_LOW);
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	69 2f       	mov	r22, r25
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
    }
}
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <SSD_voidInitDisable>:

void SSD_voidInitDisable(SSD_Type Copy_structConfig)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <SSD_voidInitDisable+0x6>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <SSD_voidInitDisable+0x8>
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	69 83       	std	Y+1, r22	; 0x01
     d32:	7a 83       	std	Y+2, r23	; 0x02
     d34:	8b 83       	std	Y+3, r24	; 0x03
     d36:	9c 83       	std	Y+4, r25	; 0x04
    if (Copy_structConfig.Type == COMMON_ANODE)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 23       	and	r24, r24
     d3c:	69 f4       	brne	.+26     	; 0xd58 <SSD_voidInitDisable+0x34>
    {
        GPIO_enumSetPinDirection(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_OUTPUT);
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	69 2f       	mov	r22, r25
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
        GPIO_enumSetPinValue(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_LOW);
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	69 2f       	mov	r22, r25
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <SSD_voidInitDisable+0x52>
    }
    else if (Copy_structConfig.Type == COMMON_CATHOD)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	61 f4       	brne	.+24     	; 0xd76 <SSD_voidInitDisable+0x52>
    {
        GPIO_enumSetPinDirection(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_OUTPUT);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	69 2f       	mov	r22, r25
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
        GPIO_enumSetPinValue(Copy_structConfig.EnablePort, Copy_structConfig.EnablePin, GPIO_PIN_HIGH);
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	69 2f       	mov	r22, r25
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
    }
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type Copy_structConfig, u8 Copy_u8Number)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <SSD_voidSendNumber+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <SSD_voidSendNumber+0x8>
     d8c:	0f 92       	push	r0
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	69 83       	std	Y+1, r22	; 0x01
     d94:	7a 83       	std	Y+2, r23	; 0x02
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	9c 83       	std	Y+4, r25	; 0x04
     d9a:	4d 83       	std	Y+5, r20	; 0x05
    if (Copy_structConfig.Type == COMMON_ANODE)
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	88 23       	and	r24, r24
     da0:	79 f4       	brne	.+30     	; 0xdc0 <SSD_voidSendNumber+0x3c>
    {
        GPIO_enumSetPortValue(Copy_structConfig.DataPort, ~(Local_u8SSDNumbers[Copy_u8Number]));
     da2:	2a 81       	ldd	r18, Y+2	; 0x02
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	e0 5a       	subi	r30, 0xA0	; 160
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	80 81       	ld	r24, Z
     db2:	98 2f       	mov	r25, r24
     db4:	90 95       	com	r25
     db6:	82 2f       	mov	r24, r18
     db8:	69 2f       	mov	r22, r25
     dba:	0e 94 d7 03 	call	0x7ae	; 0x7ae <GPIO_enumSetPortValue>
     dbe:	0f c0       	rjmp	.+30     	; 0xdde <SSD_voidSendNumber+0x5a>
    }
    else if (Copy_structConfig.Type == COMMON_CATHOD)
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	61 f4       	brne	.+24     	; 0xdde <SSD_voidSendNumber+0x5a>
    {
        GPIO_enumSetPortValue(Copy_structConfig.DataPort, Local_u8SSDNumbers[Copy_u8Number]);
     dc6:	2a 81       	ldd	r18, Y+2	; 0x02
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	e0 5a       	subi	r30, 0xA0	; 160
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	90 81       	ld	r25, Z
     dd6:	82 2f       	mov	r24, r18
     dd8:	69 2f       	mov	r22, r25
     dda:	0e 94 d7 03 	call	0x7ae	; 0x7ae <GPIO_enumSetPortValue>
    }
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <SSD_voidWithDecoder>:

void SSD_voidWithDecoder(u8 Copy_u8Port, u8 Copy_u8Number, u8 PinOrder)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <SSD_voidWithDecoder+0x6>
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	6a 83       	std	Y+2, r22	; 0x02
     dfe:	4b 83       	std	Y+3, r20	; 0x03
    if (PinOrder == LOW_NIBBLES)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 23       	and	r24, r24
     e04:	29 f4       	brne	.+10     	; 0xe10 <SSD_voidWithDecoder+0x22>
    {
        GPIO_enumWriteLowNibbles(Copy_u8Port, Copy_u8Number);
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	6a 81       	ldd	r22, Y+2	; 0x02
     e0a:	0e 94 72 05 	call	0xae4	; 0xae4 <GPIO_enumWriteLowNibbles>
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <SSD_voidWithDecoder+0x30>
    }
    else if (PinOrder == HIGH_NIBBLES)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	21 f4       	brne	.+8      	; 0xe1e <SSD_voidWithDecoder+0x30>
    {
        GPIO_enumWriteHighNibbles(Copy_u8Port, Copy_u8Number);
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	6a 81       	ldd	r22, Y+2	; 0x02
     e1a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <GPIO_enumWriteHighNibbles>
    }
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <LED_voidInit>:
#include "LED_private.h"
#include "LED_interface.h"


void LED_voidInit(LED_type LED_Configuration)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <LED_voidInit+0x6>
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	69 83       	std	Y+1, r22	; 0x01
     e38:	7a 83       	std	Y+2, r23	; 0x02
     e3a:	8b 83       	std	Y+3, r24	; 0x03
    GPIO_enumSetPinDirection(LED_Configuration.Port, LED_Configuration.Pin, GPIO_PIN_OUTPUT);
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	69 2f       	mov	r22, r25
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
}
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <LED_voidOn>:

void LED_voidOn(LED_type LED_Configuration)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <LED_voidOn+0x6>
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	69 83       	std	Y+1, r22	; 0x01
     e62:	7a 83       	std	Y+2, r23	; 0x02
     e64:	8b 83       	std	Y+3, r24	; 0x03
    if (LED_Configuration.Active_State == ACTIVE_HIGH)
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	39 f4       	brne	.+14     	; 0xe7a <LED_voidOn+0x26>
    {
        GPIO_enumSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, GPIO_PIN_HIGH);
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	69 2f       	mov	r22, r25
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <LED_voidOn+0x38>
    }
    else if (LED_Configuration.Active_State == ACTIVE_lOW)
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	88 23       	and	r24, r24
     e7e:	31 f4       	brne	.+12     	; 0xe8c <LED_voidOn+0x38>
    {
        GPIO_enumSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, GPIO_PIN_LOW);
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	9a 81       	ldd	r25, Y+2	; 0x02
     e84:	69 2f       	mov	r22, r25
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
    }
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <LED_voidOff>:

void LED_voidOff(LED_type LED_Configuration)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <LED_voidOff+0x6>
     e9e:	0f 92       	push	r0
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	69 83       	std	Y+1, r22	; 0x01
     ea6:	7a 83       	std	Y+2, r23	; 0x02
     ea8:	8b 83       	std	Y+3, r24	; 0x03
    if (LED_Configuration.Active_State == ACTIVE_HIGH)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	39 f4       	brne	.+14     	; 0xebe <LED_voidOff+0x26>
    {
        GPIO_enumSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, GPIO_PIN_LOW);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	69 2f       	mov	r22, r25
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <LED_voidOff+0x38>
    }
    else if (LED_Configuration.Active_State == ACTIVE_lOW)
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	88 23       	and	r24, r24
     ec2:	31 f4       	brne	.+12     	; 0xed0 <LED_voidOff+0x38>
    {
        GPIO_enumSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, GPIO_PIN_HIGH);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	69 2f       	mov	r22, r25
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
    }
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <LED_voidToggle>:

void LED_voidToggle(LED_type LED_Configuration)
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <LED_voidToggle+0x6>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	69 83       	std	Y+1, r22	; 0x01
     eea:	7a 83       	std	Y+2, r23	; 0x02
     eec:	8b 83       	std	Y+3, r24	; 0x03
    GPIO_enumTogglePinValue(LED_Configuration.Port, LED_Configuration.Pin);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	69 2f       	mov	r22, r25
     ef4:	0e 94 00 03 	call	0x600	; 0x600 <GPIO_enumTogglePinValue>
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <BUZ_voidInit>:
#include "BUZ_private.h"
#include "BUZ_interface.h"


void BUZ_voidInit(BUZ_type BUZ_Configuration)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	00 d0       	rcall	.+0      	; 0xf0a <BUZ_voidInit+0x6>
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	69 83       	std	Y+1, r22	; 0x01
     f12:	7a 83       	std	Y+2, r23	; 0x02
     f14:	8b 83       	std	Y+3, r24	; 0x03
    GPIO_enumSetPinDirection(BUZ_Configuration.Port, BUZ_Configuration.Pin, GPIO_PIN_OUTPUT);
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	69 2f       	mov	r22, r25
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <GPIO_enumSetPinDirection>
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <BUZ_voidOn>:

void BUZ_voidOn(BUZ_type BUZ_Configuration)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <BUZ_voidOn+0x6>
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	69 83       	std	Y+1, r22	; 0x01
     f3c:	7a 83       	std	Y+2, r23	; 0x02
     f3e:	8b 83       	std	Y+3, r24	; 0x03
    if (BUZ_Configuration.Active_State == ACTIVE_HIGH)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	39 f4       	brne	.+14     	; 0xf54 <BUZ_voidOn+0x26>
    {
        GPIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, GPIO_PIN_HIGH);
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	9a 81       	ldd	r25, Y+2	; 0x02
     f4a:	69 2f       	mov	r22, r25
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <BUZ_voidOn+0x38>
    }
    else if (BUZ_Configuration.Active_State == ACTIVE_lOW)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	88 23       	and	r24, r24
     f58:	31 f4       	brne	.+12     	; 0xf66 <BUZ_voidOn+0x38>
    {
        GPIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, GPIO_PIN_LOW);
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	69 2f       	mov	r22, r25
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
    }
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <BUZ_voidOff>:

void BUZ_voidOff(BUZ_type BUZ_Configuration)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <BUZ_voidOff+0x6>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	69 83       	std	Y+1, r22	; 0x01
     f80:	7a 83       	std	Y+2, r23	; 0x02
     f82:	8b 83       	std	Y+3, r24	; 0x03
    if (BUZ_Configuration.Active_State == ACTIVE_HIGH)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	39 f4       	brne	.+14     	; 0xf98 <BUZ_voidOff+0x26>
    {
        GPIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, GPIO_PIN_LOW);
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	69 2f       	mov	r22, r25
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <BUZ_voidOff+0x38>
    }
    else if (BUZ_Configuration.Active_State == ACTIVE_lOW)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	88 23       	and	r24, r24
     f9c:	31 f4       	brne	.+12     	; 0xfaa <BUZ_voidOff+0x38>
    {
        GPIO_enumSetPinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin, GPIO_PIN_HIGH);
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	69 2f       	mov	r22, r25
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <GPIO_enumSetPinValue>
    }
}
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <BUZ_voidToggle>:

void BUZ_voidToggle(BUZ_type BUZ_Configuration)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <BUZ_voidToggle+0x6>
     fbc:	0f 92       	push	r0
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	69 83       	std	Y+1, r22	; 0x01
     fc4:	7a 83       	std	Y+2, r23	; 0x02
     fc6:	8b 83       	std	Y+3, r24	; 0x03
    GPIO_enumTogglePinValue(BUZ_Configuration.Port, BUZ_Configuration.Pin);
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	69 2f       	mov	r22, r25
     fce:	0e 94 00 03 	call	0x600	; 0x600 <GPIO_enumTogglePinValue>
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <main>:
u8 Count1 = 0;
u8 Count2 = 0;
u8 Result = 0;

int main(void)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	app();
     fe6:	0e 94 4d 08 	call	0x109a	; 0x109a <app>
	while (1)
	{
		Increment_Number(SW_count1_INC, &Count1);
     fea:	2c e7       	ldi	r18, 0x7C	; 124
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	60 91 6a 00 	lds	r22, 0x006A
     ff2:	70 91 6b 00 	lds	r23, 0x006B
     ff6:	80 91 6c 00 	lds	r24, 0x006C
     ffa:	a9 01       	movw	r20, r18
     ffc:	0e 94 84 08 	call	0x1108	; 0x1108 <Increment_Number>
		Decrement_Number(SW_count1_DEC, &Count1);
    1000:	2c e7       	ldi	r18, 0x7C	; 124
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	60 91 6d 00 	lds	r22, 0x006D
    1008:	70 91 6e 00 	lds	r23, 0x006E
    100c:	80 91 6f 00 	lds	r24, 0x006F
    1010:	a9 01       	movw	r20, r18
    1012:	0e 94 b6 08 	call	0x116c	; 0x116c <Decrement_Number>
		Increment_Number(SW_count2_INC, &Count2);
    1016:	2d e7       	ldi	r18, 0x7D	; 125
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	60 91 70 00 	lds	r22, 0x0070
    101e:	70 91 71 00 	lds	r23, 0x0071
    1022:	80 91 72 00 	lds	r24, 0x0072
    1026:	a9 01       	movw	r20, r18
    1028:	0e 94 84 08 	call	0x1108	; 0x1108 <Increment_Number>
		Decrement_Number(SW_count2_DEC, &Count2);
    102c:	2d e7       	ldi	r18, 0x7D	; 125
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	60 91 73 00 	lds	r22, 0x0073
    1034:	70 91 74 00 	lds	r23, 0x0074
    1038:	80 91 75 00 	lds	r24, 0x0075
    103c:	a9 01       	movw	r20, r18
    103e:	0e 94 b6 08 	call	0x116c	; 0x116c <Decrement_Number>
		ShowResult();
    1042:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <ShowResult>
		Reset();
    1046:	0e 94 0a 09 	call	0x1214	; 0x1214 <Reset>
		SSD_voidWithDecoder(GPIO_PORTA, Count1, LOW_NIBBLES);
    104a:	90 91 7c 00 	lds	r25, 0x007C
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	69 2f       	mov	r22, r25
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	0e 94 f7 06 	call	0xdee	; 0xdee <SSD_voidWithDecoder>
		SSD_voidWithDecoder(GPIO_PORTA, Count2, HIGH_NIBBLES);
    1058:	90 91 7d 00 	lds	r25, 0x007D
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	69 2f       	mov	r22, r25
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	0e 94 f7 06 	call	0xdee	; 0xdee <SSD_voidWithDecoder>
		SSD_voidWithDecoder(GPIO_PORTB, Result / 10, LOW_NIBBLES);
    1066:	80 91 7e 00 	lds	r24, 0x007E
    106a:	9a e0       	ldi	r25, 0x0A	; 10
    106c:	69 2f       	mov	r22, r25
    106e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodqi4>
    1072:	98 2f       	mov	r25, r24
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	69 2f       	mov	r22, r25
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	0e 94 f7 06 	call	0xdee	; 0xdee <SSD_voidWithDecoder>
		SSD_voidWithDecoder(GPIO_PORTB, Result % 10, HIGH_NIBBLES);
    107e:	80 91 7e 00 	lds	r24, 0x007E
    1082:	9a e0       	ldi	r25, 0x0A	; 10
    1084:	69 2f       	mov	r22, r25
    1086:	0e 94 2b 09 	call	0x1256	; 0x1256 <__udivmodqi4>
    108a:	89 2f       	mov	r24, r25
    108c:	98 2f       	mov	r25, r24
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	69 2f       	mov	r22, r25
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	0e 94 f7 06 	call	0xdee	; 0xdee <SSD_voidWithDecoder>
    1098:	a8 cf       	rjmp	.-176    	; 0xfea <main+0xc>

0000109a <app>:
	}
	return 0;
}

void app(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	SW_voidInit(SW_count1_INC);
    10a2:	60 91 6a 00 	lds	r22, 0x006A
    10a6:	70 91 6b 00 	lds	r23, 0x006B
    10aa:	80 91 6c 00 	lds	r24, 0x006C
    10ae:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SW_voidInit>
	SW_voidInit(SW_count1_DEC);
    10b2:	60 91 6d 00 	lds	r22, 0x006D
    10b6:	70 91 6e 00 	lds	r23, 0x006E
    10ba:	80 91 6f 00 	lds	r24, 0x006F
    10be:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SW_voidInit>
	SW_voidInit(SW_count2_INC);
    10c2:	60 91 70 00 	lds	r22, 0x0070
    10c6:	70 91 71 00 	lds	r23, 0x0071
    10ca:	80 91 72 00 	lds	r24, 0x0072
    10ce:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SW_voidInit>
	SW_voidInit(SW_count2_DEC);
    10d2:	60 91 73 00 	lds	r22, 0x0073
    10d6:	70 91 74 00 	lds	r23, 0x0074
    10da:	80 91 75 00 	lds	r24, 0x0075
    10de:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SW_voidInit>
	SW_voidInit(SW_Show_Result);
    10e2:	60 91 76 00 	lds	r22, 0x0076
    10e6:	70 91 77 00 	lds	r23, 0x0077
    10ea:	80 91 78 00 	lds	r24, 0x0078
    10ee:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SW_voidInit>
	SW_voidInit(SW_Reset);
    10f2:	60 91 79 00 	lds	r22, 0x0079
    10f6:	70 91 7a 00 	lds	r23, 0x007A
    10fa:	80 91 7b 00 	lds	r24, 0x007B
    10fe:	0e 94 ff 05 	call	0xbfe	; 0xbfe <SW_voidInit>
}
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <Increment_Number>:

void Increment_Number(SW_Type SW, u8 *Number)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <Increment_Number+0x6>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <Increment_Number+0x8>
    1110:	0f 92       	push	r0
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	69 83       	std	Y+1, r22	; 0x01
    1118:	7a 83       	std	Y+2, r23	; 0x02
    111a:	8b 83       	std	Y+3, r24	; 0x03
    111c:	5d 83       	std	Y+5, r21	; 0x05
    111e:	4c 83       	std	Y+4, r20	; 0x04
	if (SW_u8GetPressed(SW))
    1120:	69 81       	ldd	r22, Y+1	; 0x01
    1122:	7a 81       	ldd	r23, Y+2	; 0x02
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    112a:	88 23       	and	r24, r24
    112c:	b9 f0       	breq	.+46     	; 0x115c <Increment_Number+0x54>
	{
		while (SW_u8GetPressed(SW))
    112e:	69 81       	ldd	r22, Y+1	; 0x01
    1130:	7a 81       	ldd	r23, Y+2	; 0x02
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    1138:	88 23       	and	r24, r24
    113a:	c9 f7       	brne	.-14     	; 0x112e <Increment_Number+0x26>
			;
		(*Number)++;
    113c:	ec 81       	ldd	r30, Y+4	; 0x04
    113e:	fd 81       	ldd	r31, Y+5	; 0x05
    1140:	80 81       	ld	r24, Z
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	ec 81       	ldd	r30, Y+4	; 0x04
    1146:	fd 81       	ldd	r31, Y+5	; 0x05
    1148:	80 83       	st	Z, r24
		if ((*Number) == 10)
    114a:	ec 81       	ldd	r30, Y+4	; 0x04
    114c:	fd 81       	ldd	r31, Y+5	; 0x05
    114e:	80 81       	ld	r24, Z
    1150:	8a 30       	cpi	r24, 0x0A	; 10
    1152:	21 f4       	brne	.+8      	; 0x115c <Increment_Number+0x54>
		{
			(*Number) = 9;
    1154:	ec 81       	ldd	r30, Y+4	; 0x04
    1156:	fd 81       	ldd	r31, Y+5	; 0x05
    1158:	89 e0       	ldi	r24, 0x09	; 9
    115a:	80 83       	st	Z, r24
		}
	}
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <Decrement_Number>:

void Decrement_Number(SW_Type SW, u8 *Number)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <Decrement_Number+0x6>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <Decrement_Number+0x8>
    1174:	0f 92       	push	r0
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	69 83       	std	Y+1, r22	; 0x01
    117c:	7a 83       	std	Y+2, r23	; 0x02
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	5d 83       	std	Y+5, r21	; 0x05
    1182:	4c 83       	std	Y+4, r20	; 0x04
	if (SW_u8GetPressed(SW))
    1184:	69 81       	ldd	r22, Y+1	; 0x01
    1186:	7a 81       	ldd	r23, Y+2	; 0x02
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    118e:	88 23       	and	r24, r24
    1190:	b9 f0       	breq	.+46     	; 0x11c0 <Decrement_Number+0x54>
	{
		while (SW_u8GetPressed(SW))
    1192:	69 81       	ldd	r22, Y+1	; 0x01
    1194:	7a 81       	ldd	r23, Y+2	; 0x02
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    119c:	88 23       	and	r24, r24
    119e:	c9 f7       	brne	.-14     	; 0x1192 <Decrement_Number+0x26>
			;
		if ((*Number) == 0)
    11a0:	ec 81       	ldd	r30, Y+4	; 0x04
    11a2:	fd 81       	ldd	r31, Y+5	; 0x05
    11a4:	80 81       	ld	r24, Z
    11a6:	88 23       	and	r24, r24
    11a8:	21 f4       	brne	.+8      	; 0x11b2 <Decrement_Number+0x46>
		{
			(*Number) = 0;
    11aa:	ec 81       	ldd	r30, Y+4	; 0x04
    11ac:	fd 81       	ldd	r31, Y+5	; 0x05
    11ae:	10 82       	st	Z, r1
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <Decrement_Number+0x54>
		}
		else
		{
			(*Number)--;
    11b2:	ec 81       	ldd	r30, Y+4	; 0x04
    11b4:	fd 81       	ldd	r31, Y+5	; 0x05
    11b6:	80 81       	ld	r24, Z
    11b8:	81 50       	subi	r24, 0x01	; 1
    11ba:	ec 81       	ldd	r30, Y+4	; 0x04
    11bc:	fd 81       	ldd	r31, Y+5	; 0x05
    11be:	80 83       	st	Z, r24
		}
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <ShowResult>:

void ShowResult(void)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	if (SW_u8GetPressed(SW_Show_Result))
    11d8:	60 91 76 00 	lds	r22, 0x0076
    11dc:	70 91 77 00 	lds	r23, 0x0077
    11e0:	80 91 78 00 	lds	r24, 0x0078
    11e4:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    11e8:	88 23       	and	r24, r24
    11ea:	89 f0       	breq	.+34     	; 0x120e <ShowResult+0x3e>
	{
		while (SW_u8GetPressed(SW_Show_Result))
    11ec:	60 91 76 00 	lds	r22, 0x0076
    11f0:	70 91 77 00 	lds	r23, 0x0077
    11f4:	80 91 78 00 	lds	r24, 0x0078
    11f8:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    11fc:	88 23       	and	r24, r24
    11fe:	b1 f7       	brne	.-20     	; 0x11ec <ShowResult+0x1c>
			;
		Result = Count1 + Count2;
    1200:	80 91 7c 00 	lds	r24, 0x007C
    1204:	90 91 7d 00 	lds	r25, 0x007D
    1208:	89 0f       	add	r24, r25
    120a:	80 93 7e 00 	sts	0x007E, r24
	}
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <Reset>:

void Reset(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	if (SW_u8GetPressed(SW_Reset))
    121c:	60 91 79 00 	lds	r22, 0x0079
    1220:	70 91 7a 00 	lds	r23, 0x007A
    1224:	80 91 7b 00 	lds	r24, 0x007B
    1228:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    122c:	88 23       	and	r24, r24
    122e:	81 f0       	breq	.+32     	; 0x1250 <Reset+0x3c>
	{
		while (SW_u8GetPressed(SW_Reset))
    1230:	60 91 79 00 	lds	r22, 0x0079
    1234:	70 91 7a 00 	lds	r23, 0x007A
    1238:	80 91 7b 00 	lds	r24, 0x007B
    123c:	0e 94 14 06 	call	0xc28	; 0xc28 <SW_u8GetPressed>
    1240:	88 23       	and	r24, r24
    1242:	b1 f7       	brne	.-20     	; 0x1230 <Reset+0x1c>
			;
		Count1 = 0;
    1244:	10 92 7c 00 	sts	0x007C, r1
		Count2 = 0;
    1248:	10 92 7d 00 	sts	0x007D, r1
		Result = 0;
    124c:	10 92 7e 00 	sts	0x007E, r1
	}
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <__udivmodqi4>:
    1256:	99 1b       	sub	r25, r25
    1258:	79 e0       	ldi	r23, 0x09	; 9
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <__udivmodqi4_ep>

0000125c <__udivmodqi4_loop>:
    125c:	99 1f       	adc	r25, r25
    125e:	96 17       	cp	r25, r22
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__udivmodqi4_ep>
    1262:	96 1b       	sub	r25, r22

00001264 <__udivmodqi4_ep>:
    1264:	88 1f       	adc	r24, r24
    1266:	7a 95       	dec	r23
    1268:	c9 f7       	brne	.-14     	; 0x125c <__udivmodqi4_loop>
    126a:	80 95       	com	r24
    126c:	08 95       	ret

0000126e <_exit>:
    126e:	f8 94       	cli

00001270 <__stop_program>:
    1270:	ff cf       	rjmp	.-2      	; 0x1270 <__stop_program>
